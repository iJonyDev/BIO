library(Biobase)
library(GEOquery)
library(caret)
library(cluster)
library(factoextra)
# Obtener los datos GSE62301
dataSetComplete <- getGEO("GSE62301", GSEMatrix=TRUE, AnnotGPL=TRUE)
# Obtener los datos GSE62301
dataSetComplete <- getGEO("GSE62301", GSEMatrix=TRUE, AnnotGPL=TRUE)
# Para series GSE, los datos vienen en una lista, normalmente usamos el primer elemento
expressionSet <- dataSetComplete[[1]]
# Obtener la matriz de expresión
dataGSE <- exprs(expressionSet)
# Eliminar NAs si existen
dataGSE <- na.omit(dataGSE)
# Obtener información sobre genes y muestras
genesGSE <- rownames(dataGSE)
samplesGSE <- colnames(dataGSE)
# Crear copia para preprocesamiento
dataGSEPreProcess <- dataGSE
# Obtener número de muestras
samplesCount = ncol(dataGSEPreProcess)
# Obtener resumen de los datos
summary(dataGSEPreProcess)
############
# OUTLIERS #
############
for (i in 1:samplesCount) { # Por cada columna del dataset
# Detección de outliers
Q1 = quantile(dataGSEPreProcess[,i], 0.25, na.rm = TRUE)
Q3 = quantile(dataGSEPreProcess[,i], 0.75, na.rm = TRUE)
IQR = Q3-Q1
leveDown = Q1-1.5*IQR
leveUp = Q3 + 1.5*IQR
media = mean(dataGSEPreProcess[,i], na.rm = TRUE)
# Detectar tanto outliers superiores como inferiores
outliers <- dataGSEPreProcess[,i] >= leveUp | dataGSEPreProcess[,i] <= leveDown
dataGSEPreProcess[outliers,i] <- media
}
summary(dataGSEPreProcess)
#################
# PREPROCESSING #
#################
preprocessParams <- preProcess(dataGSEPreProcess, method=c("center", "scale"))
dataGSEPreProcess <- predict(preprocessParams, dataGSEPreProcess)
summary(dataGSEPreProcess)
######################
# CLUSTERING: KMEANS #
######################
# Numero optimo de custers clusters KMeans
# Calcula el WSS inicial
wss <- (nrow(dataGSEPreProcess)-1)*sum(apply(dataGSEPreProcess,2,var))
# Calcula WSS para diferentes números de clusters
for (i in 2:15)
wss[i] <- sum(kmeans(dataGSEPreProcess, centers=i, iter.max=80)$withinss)
# Grafica el método del codo
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Suma de cuadrados dentro de los grupos",
main="Método del Codo para K-means")
numClusters = 3 # Optimal number of clusters KMeans.
set.seed(100)
clusters <- kmeans(dataGSEPreProcess, centers = numClusters, iter.max=80)
clusters # 95.8 % de datos bien agrupados con 3 clusters.
# Visualización de los clusters
fviz_cluster(clusters, data = dataGSEPreProcess, geom = "point", ellipse.type = "convex")
data_clus_1 <- dataGSEPreProcess[clusters$cluster == 1,]
data_clus_3 <- dataGSEPreProcess[clusters$cluster == 3,]
# Guardar los identificadores de los genes en los clusters
write.table(rownames(data_clus_1), file="cluster1.txt",sep = "\t", row.names=FALSE, col.names=FALSE)
write.table(rownames(data_clus_1), file="cluster1.txt",sep = "\t", row.names=FALSE, col.names=FALSE)
# Guardarmos todos los genes
all_genes <- rownames(dataGSEPreProcess)
write.table(all_genes, file="all_genes.txt",sep = "\t", row.names=FALSE, col.names=FALSE)
data_clus_1 <- dataGSEPreProcess[clusters$cluster == 1,]
data_clus_3 <- dataGSEPreProcess[clusters$cluster == 3,]
# Guardar los identificadores de los genes en los clusters
write.table(rownames(data_clus_1), file="cluster1.txt",sep = "\t", row.names=FALSE, col.names=FALSE)
write.table(rownames(data_clus_3), file="cluster3.txt",sep = "\t", row.names=FALSE, col.names=FALSE)
# Guardarmos todos los genes
all_genes <- rownames(dataGSEPreProcess)
write.table(all_genes, file="all_genes.txt",sep = "\t", row.names=FALSE, col.names=FALSE)
####################
# INSTALL PACKAGES #
####################
install.packages(c("cluster", "factoextra", "caret", "ggplot2", "edgeR"))
install.packages(c("cluster", "factoextra", "caret", "ggplot2", "edgeR"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("edgeR", "limma", "Biobase", "GEOquery"))
###########################
# LOAD DATA AND LIBRARIES #
###########################
library(edgeR)
library(cluster)
library(factoextra)
library(ggplot2)
library(Biobase)
# Cargar el dataset de RNA-Seq
seqdata <- read.delim("GSE290268_RNAseq_FPKM_data.txt", stringsAsFactors = FALSE)
# Cargar el dataset de RNA-Seq
seqdata <- read.delim("GSE290268_RNAseq_FPKM_data.txt", stringsAsFactors = FALSE)
# Cargar el dataset de RNA-Seq
seqdata <- read.delim("GSE290268_RNAseq_FPKM_data.txt", stringsAsFactors = FALSE)
# Cargar el dataset de RNA-Seq
seqdata <- read.delim("/Users/jonathanquishpe/JoniDev/BIO/EPD6/Problema2/GSE290268_RNAseq_FPKM_data.txt", stringsAsFactors = FALSE)
library(edgeR)
library(cluster)
library(factoextra)
library(ggplot2)
library(Biobase)
# Cargar el dataset de RNA-Seq
seqdata <- read.delim("/Users/jonathanquishpe/JoniDev/BIO/EPD6/Problema2/GSE290268_RNAseq_FPKM_data.txt", stringsAsFactors = FALSE)
# Formatear los datos
countdata <- seqdata[,-1]
rownames(countdata) <- seqdata[,1]
# Calcular CPM (Counts Per Million)
myCPM <- cpm(countdata)
# Filtrar genes de baja expresión (CPM > 0.5 en al menos 8 muestras)
threshold <- myCPM > 0.5
keep <- rowSums(threshold) >= 8
counts.keep <- countdata[keep,]
counts.normalised <- cpm(counts.keep, log = TRUE) # Log2-CPM para mejor distribución
# Crear objeto DGEList para análisis posteriores
dgeObj <- DGEList(counts = counts.keep)
dgeObj <- calcNormFactors(dgeObj)
# Escalar datos para clustering (centrar y escalar)
preprocessParams <- preProcess(t(counts.normalised), method = c("center", "scale"))
dataForClustering <- predict(preprocessParams, t(counts.normalised))
# Método del codo para determinar número óptimo de clusters
wss <- sapply(1:10, function(k){kmeans(dataForClustering, k, nstart = 20)$tot.withinss})
plot(1:10, wss, type = "b", xlab = "Número de clusters", ylab = "Suma de cuadrados dentro de grupos")
# Método del codo para determinar número óptimo de clusters
wss <- sapply(1:10, function(k){kmeans(dataForClustering, k, nstart = 20)$tot.withinss})
# Seleccionar genes más variables para clustering (top 1000 por varianza)
gene_vars <- apply(counts.normalised, 1, var)
top_genes <- names(sort(gene_vars, decreasing = TRUE))[1:1000]
top_gene_data <- counts.normalised[top_genes,]
# Escalar datos de genes
scaled_gene_data <- t(scale(t(top_gene_data)))
# Clustering jerárquico de genes
gene_dist <- dist(scaled_gene_data)
gene_clusters <- hclust(gene_dist, method = "ward.D2")
# Cortar árbol para obtener clusters (ejemplo con 5 clusters)
gene_cluster_cut <- cutree(gene_clusters, k = 5)
# Visualización de heatmap
heatmap(as.matrix(scaled_gene_data),
Rowv = as.dendrogram(gene_clusters),
Colv = NA,
col = colorRampPalette(c("blue", "white", "red"))(100),
scale = "none")
# Guardar listas de genes por cluster para enriquecimiento
for (i in 1:max(gene_cluster_cut)) {
genes_in_cluster <- names(gene_cluster_cut[gene_cluster_cut == i])
write.table(genes_in_cluster,
file = paste0("gene_cluster_", i, ".txt"),
sep = "\t",
row.names = FALSE,
col.names = FALSE,
quote = FALSE)
}
# Guardar todos los genes analizados
write.table(rownames(counts.normalised),
file = "all_genes.txt",
sep = "\t",
row.names = FALSE,
col.names = FALSE,
quote = FALSE)
# Guardar datos normalizados para análisis posteriores
write.csv(counts.normalised, file = "normalized_expression_data.csv")
getwd()
###########################
# LOAD DATA AND LIBRARIES #
###########################
library(Biobase)
library(GEOquery)
library(caret)
library(cluster)
library(factoextra)
setwd("/Users/jonathanquishpe/JoniDev/BIO/EPD6/Problema1")
# Obtener los datos GSE62301
dataSetComplete <- getGEO("GSE62301", GSEMatrix=TRUE, AnnotGPL=TRUE)
# Para series GSE, los datos vienen en una lista, normalmente usamos el primer elemento
expressionSet <- dataSetComplete[[1]]
# Obtener la matriz de expresión
dataGSE <- exprs(expressionSet)
# Eliminar NAs si existen
dataGSE <- na.omit(dataGSE)
# Obtener información sobre genes y muestras
genesGSE <- rownames(dataGSE)
samplesGSE <- colnames(dataGSE)
# Crear copia para preprocesamiento
dataGSEPreProcess <- dataGSE
# Obtener número de muestras
samplesCount = ncol(dataGSEPreProcess)
# Obtener resumen de los datos
summary(dataGSEPreProcess)
############
# OUTLIERS #
############
for (i in 1:samplesCount) { # Por cada columna del dataset
# Detección de outliers
Q1 = quantile(dataGSEPreProcess[,i], 0.25, na.rm = TRUE)
Q3 = quantile(dataGSEPreProcess[,i], 0.75, na.rm = TRUE)
IQR = Q3-Q1
leveDown = Q1-1.5*IQR
leveUp = Q3 + 1.5*IQR
media = mean(dataGSEPreProcess[,i], na.rm = TRUE)
# Detectar tanto outliers superiores como inferiores
outliers <- dataGSEPreProcess[,i] >= leveUp | dataGSEPreProcess[,i] <= leveDown
dataGSEPreProcess[outliers,i] <- media
}
summary(dataGSEPreProcess)
#################
# PREPROCESSING #
#################
preprocessParams <- preProcess(dataGSEPreProcess, method=c("center", "scale"))
dataGSEPreProcess <- predict(preprocessParams, dataGSEPreProcess)
summary(dataGSEPreProcess)
######################
# CLUSTERING: KMEANS #
######################
# Numero optimo de custers clusters KMeans
# Calcula el WSS inicial
wss <- (nrow(dataGSEPreProcess)-1)*sum(apply(dataGSEPreProcess,2,var))
# Calcula WSS para diferentes números de clusters
for (i in 2:15)
wss[i] <- sum(kmeans(dataGSEPreProcess, centers=i, iter.max=80)$withinss)
# Grafica el método del codo
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Suma de cuadrados dentro de los grupos",
main="Método del Codo para K-means")
numClusters = 3 # Optimal number of clusters KMeans.
set.seed(100)
clusters <- kmeans(dataGSEPreProcess, centers = numClusters, iter.max=80)
clusters # 95.8 % de datos bien agrupados con 3 clusters.
# Visualización de los clusters
fviz_cluster(clusters, data = dataGSEPreProcess, geom = "point", ellipse.type = "convex")
data_clus_1 <- dataGSEPreProcess[clusters$cluster == 1,]
data_clus_3 <- dataGSEPreProcess[clusters$cluster == 3,]
# Guardar los identificadores de los genes en los clusters
write.table(rownames(data_clus_1), file="cluster1.txt",sep = "\t", row.names=FALSE, col.names=FALSE,
quote = FALSE)
write.table(rownames(data_clus_3), file="cluster3.txt",sep = "\t", row.names=FALSE, col.names=FALSE,
quote = FALSE)
# Guardarmos todos los genes
all_genes <- rownames(dataGSEPreProcess)
write.table(all_genes, file="all_genes.txt",sep = "\t", row.names=FALSE, col.names=FALSE,
quote = FALSE)
###########################
# LOAD DATA AND LIBRARIES #
###########################
library(edgeR)
library(cluster)
library(factoextra)
library(ggplot2)
library(Biobase)
####################################
# 1. CARGAR Y PREPROCESAR DATOS RNA-SEQ
####################################
setwd("/Users/jonathanquishpe/JoniDev/BIO/EPD6/Problema2")
# Cargar el dataset de RNA-Seq
seqdata <- read.delim("/Users/jonathanquishpe/JoniDev/BIO/EPD6/Problema2/GSE290268_RNAseq_FPKM_data.txt", stringsAsFactors = FALSE)
# Formatear los datos
countdata <- seqdata[,-1]
rownames(countdata) <- seqdata[,1]
# Calcular CPM (Counts Per Million)
myCPM <- cpm(countdata)
# Filtrar genes de baja expresión (CPM > 0.5 en al menos 8 muestras)
threshold <- myCPM > 0.5
keep <- rowSums(threshold) >= 8
counts.keep <- countdata[keep,]
counts.normalised <- cpm(counts.keep, log = TRUE) # Log2-CPM para mejor distribución
# Crear objeto DGEList para análisis posteriores
dgeObj <- DGEList(counts = counts.keep)
dgeObj <- calcNormFactors(dgeObj)
# Escalar datos para clustering (centrar y escalar)
preprocessParams <- preProcess(t(counts.normalised), method = c("center", "scale"))
dataForClustering <- predict(preprocessParams, t(counts.normalised))
# Seleccionar genes más variables para clustering (top 1000 por varianza)
gene_vars <- apply(counts.normalised, 1, var)
top_genes <- names(sort(gene_vars, decreasing = TRUE))[1:1000]
top_gene_data <- counts.normalised[top_genes,]
# Escalar datos de genes
scaled_gene_data <- t(scale(t(top_gene_data)))
# Clustering jerárquico de genes
gene_dist <- dist(scaled_gene_data)
gene_clusters <- hclust(gene_dist, method = "ward.D2")
# Cortar árbol para obtener clusters (ejemplo con 5 clusters)
gene_cluster_cut <- cutree(gene_clusters, k = 5)
# Visualización de heatmap
heatmap(as.matrix(scaled_gene_data),
Rowv = as.dendrogram(gene_clusters),
Colv = NA,
col = colorRampPalette(c("blue", "white", "red"))(100),
scale = "none")
# Guardar listas de genes por cluster para enriquecimiento
for (i in 1:max(gene_cluster_cut)) {
genes_in_cluster <- names(gene_cluster_cut[gene_cluster_cut == i])
write.table(genes_in_cluster,
file = paste0("gene_cluster_", i, ".txt"),
sep = "\t",
row.names = FALSE,
col.names = FALSE,
quote = FALSE)
}
# Guardar todos los genes analizados
write.table(rownames(counts.normalised),
file = "all_genes.txt",
sep = "\t",
row.names = FALSE,
col.names = FALSE,
quote = FALSE)
# Guardar datos normalizados para análisis posteriores
write.csv(counts.normalised, file = "normalized_expression_data.csv")
